"""
Script pour auditer la donn√©e d'une source, d√©tecter
des probl√®mes potentiels, et acc√©l√©rer le d√©veloppement
des DAGs (en identifiant les probl√®mes en amont).
"""

import os
import re
import webbrowser
from pathlib import Path

import numpy as np
import pandas as pd
from rich import print
from rich.prompt import Confirm, Prompt
from rich.traceback import install
from ydata_profiling import ProfileReport

from dags.sources.tasks.business_logic.source_data_download import source_data_download
from dags.sources.tasks.transform.transform_column import clean_siret

install()

DIR_CURRENT = Path(os.path.dirname(os.path.realpath(__file__)))
COLUMNS_RENAMES = {
    "id_point_apport_ou_reparation": "identifiant_externe",
}


def banner(text: str) -> None:
    """
    Affiche une bani√®re pour aider √† relire les logs CLI
    Args:
        text: texte √† afficher
    """
    print("\n[bold cyan]" + "=" * 80 + "[/bold cyan]")
    print(f"[bold cyan]{text}[/bold cyan]")
    print("[bold cyan]" + "=" * 80 + "[/bold cyan]\n")


def main():

    # ----------------------------------------------
    # 0. Config
    # ----------------------------------------------
    banner("0. Config")
    url = Prompt.ask("URL du fichier source")
    print(f"{url=}")
    print(f"{COLUMNS_RENAMES=}")

    if not Confirm.ask("\nContinuer?"):
        raise SystemExit("Interrompu par l'utilisateur")

    # ----------------------------------------------
    # 1. T√©l√©chargement des donn√©es
    # ----------------------------------------------
    banner("1. T√©l√©chargement des donn√©es")
    filename = re.sub(r"https?://[^/]+/(.*)", r"\1", url)
    filename = re.sub(r"[^a-zA-Z0-9]", "_", filename)
    path_data_csv = DIR_CURRENT / f"{filename}.csv"
    path_report_html = DIR_CURRENT / f"{filename}.html"
    print("üîΩ T√©l√©chargement des donn√©es:")
    print(f"\t - {url=}")
    print(f"\t - {path_data_csv=}")
    print(f"\t - {path_data_csv.exists()=}")
    if path_data_csv.exists():
        print("\t - Utilisation du fichier local")
        df = pd.read_csv(path_data_csv).replace({np.nan: None})
    else:
        print("\t - T√©l√©chargement de la donn√©e")
        if not Confirm.ask("\nContinuer?"):
            raise SystemExit("Interrompu par l'utilisateur")
        df = source_data_download(url)
        df.to_csv(path_data_csv, index=False)

    # ----------------------------------------------
    # 2. Structure de la dataframe
    # ----------------------------------------------
    banner("2. Structure de la dataframe")
    print("Taille:")
    print(f"{df.shape}")

    print("\nColonnes:")
    print("\n".join(sorted(df.columns.tolist())))

    # ----------------------------------------------
    # 3. Description succincte
    # ----------------------------------------------
    banner("3. Description succincte")
    print(f"{df.describe()=}")

    # ----------------------------------------------
    # 4. Cr√©ation du rapport HTML ydata-profiling
    # ----------------------------------------------
    banner("4. Cr√©ation du rapport HTML ydata-profiling")
    if not Confirm.ask("\nPasser?"):
        print(f"{path_report_html=}")
        profile = ProfileReport(df, title="Profiling")
        path_report_html.write_text(profile.to_html())
        print("Rapport HTML g√©n√©r√©")
        webbrowser.open(f"file://{path_report_html}")

    # ----------------------------------------------
    # 5. V√©rifications m√©tiers sp√©cifiques √† LVAO
    # ----------------------------------------------
    banner("5. V√©rifications m√©tiers sp√©cifiques √† LVAO")
    df = df.rename(columns=COLUMNS_RENAMES)

    # identifiant_externe
    print(" - colonne: identifiant_externe = ", end="\r")
    if "identifiant_externe" not in df.columns:
        raise ValueError("Besoin d'un identifiant externe")
    else:
        dups = df[df["identifiant_externe"].duplicated(keep=False)]
        if not dups.empty:
            print("Doublons:")
            print(dups)
            raise ValueError("Doublons sur identifiant_externe")
        print("\t - colonne: identifiant_externe = ‚úÖ (pas de doublons)")

    # siret
    if "siret" in df.columns:
        print(" - colonne: siret = ", end="\r")
        sirets = df["siret"].dropna().unique().tolist()
        sirets_invalid = [x for x in sirets if clean_siret(x) is None]
        if sirets_invalid:
            print(f"{len(sirets_invalid)=}")
            for siret in sirets_invalid[:10]:
                print(f"\t{siret=}", f"{len(siret)=}")
            print("[bold red]SIRET invalides, voir √©chantillon ci-dessus[/bold red]")
        print("\t - colonne: siret = ‚úÖ (format valide)")


if __name__ == "__main__":
    main()
