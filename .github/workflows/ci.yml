name: 🤖 CI

on:
  workflow_call:

jobs:
  backend_linter:
    name: 📝 Backend Linter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v6
        with:
          cache: "pip"
      - name: Install uv
        uses:  astral-sh/setup-uv@557e51de59eb14aaaba2ed9621916900a91d50c6
      - uses: actions/cache@v4
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-dev-airflow-${{ hashFiles('uv.lock') }}
      - name: Install the project dependencies
        run: uv sync --only-dev
      - name: Install Terragrunt and OpenTofu
        uses: gruntwork-io/terragrunt-action@95fc057922e3c3d4cc021a81a213f088f333ddef
        with:
          tg_version: '0.83.2'
          tofu_version: '1.10.3'
      - name: Check code formatting
        run: make check-format
      - uses: astral-sh/ruff-action@57714a7c8a2e59f32539362ba31877a1957dded1 # v3.5.1
      - name: Run Tofu format check
        run: tofu fmt -recursive -check infrastructure
      - name: Run Terragrunt format check
        run: terragrunt hcl fmt -check infrastructure

  frontend_linter:
    name: 📝 Frontend Linter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v5
        with:
          node-version-file: ".tool-versions"
          cache: "npm"
      - name: Build assets
        run: |
          npm ci
      - name: Check code formatting
        run: npm run format:check

  backend_tests:
    name: ✅ Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgis/postgis:15-3.3-alpine
        env:
          POSTGRES_USER: webapp
          POSTGRES_PASSWORD: webapp # pragma: allowlist secret
          POSTGRES_DB: webapp
        options: >-
          --health-cmd pg_isready
          --health-interval 1s
          --health-timeout 1s
          --health-retries 50
        ports:
          - 6543:5432

    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v6
        with:
          cache: "pip"
      - name: Install GIS Packages
        run: |
          sudo apt-get update
          sudo apt-get install gdal-bin
      - name: Install uv
        uses:  astral-sh/setup-uv@557e51de59eb14aaaba2ed9621916900a91d50c6
      - uses: actions/cache@v4
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-dev-airflow-${{ hashFiles('uv.lock') }}
      - name: Install the project dependencies
        run: uv sync --group dev --group airflow
      - name: Run unit tests
        run: make unit-test
      - name: Run integration tests
        run: make integration-test
      - name: Run data tests
        run: uv run pytest dags/tests
      - name: Check for missing migrations
        run: uv run python manage.py makemigrations --check --no-input --settings=core.test_settings
        env:
          SECRET_KEY: votre_blanquette_est_bonne # pragma: allowlist secret
          DATABASE_URL: "postgres://fakeusername:fakepassword@postgres:5432/database" # pragma: allowlist secret

  frontend_tests:
    name: ✅ Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v5
        with:
          node-version-file: ".tool-versions"
          cache: "npm"
      - name: Build assets
        run: |
          npm ci
          npm run build
      - name: Run tests
        run: npm run test

  e2e:
    name: tests de bout-en-bout
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'main' || (github.event_name ==  'pull_request' && contains( github.event.pull_request.labels.*.name, 'frontend')) }}
    services:
      postgres:
        image: postgis/postgis:15-3.3-alpine
        env:
          POSTGRES_USER: webapp
          POSTGRES_PASSWORD: webapp # pragma: allowlist secret
          POSTGRES_DB: webapp
        options: >-
          --health-cmd pg_isready
          --health-interval 1s
          --health-timeout 1s
          --health-retries 50
        ports:
          - 6543:5432
    steps:
      - uses: actions/checkout@v5

      - name: Prepare environment
        run: |
          cp .env.template .env
          echo BASE_URL=http://localhost:8000 >> .env
          echo DEBUG=false >> .env

      - uses: actions/setup-node@v5
        with:
          node-version-file: ".tool-versions"
          cache: "npm"

      - name: Build assets
        run: |
          npm ci
          npm run build

      - uses: actions/setup-python@v6
        with:
          cache: "pip"

      - name: Install GIS Packages
        run: |
          sudo apt-get update
          sudo apt-get install gdal-bin

      - name: Install uv
        uses: astral-sh/setup-uv@557e51de59eb14aaaba2ed9621916900a91d50c6
      - uses: actions/cache@v4
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-dev-${{ hashFiles('uv.lock') }}
      - name: Install the project dependencies
        run: uv sync --with dev --no-root

      - name: Prepare django, migrate, collect static files...
        run: |
          make createcachetable
          make migrate
          make collectstatic

      - name: Populate database
        run: |
          make seed-database

      - name: Init django admin superuser
        run: |
          make createsuperuser-example

      - name: Run server
        run: |
          uv run python manage.py runserver &

      - name: Install Playwright Browsers
        run: make init-playwright

      - name: Run Playwright tests
        run: npx playwright test --update-snapshots

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

# Address actions/missing-workflow-permissions rule in
# code scanning alerts
permissions:
  contents: read
