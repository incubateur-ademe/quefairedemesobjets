import numpy as np
import pandas as pd
from shared.tasks.business_logic import normalize
from utils.django import (
    django_model_queryset_generate,
    django_model_queryset_to_df,
    django_model_queryset_to_sql,
    django_setup_full,
)

django_setup_full()
from django.db.models import Model  # noqa: E402

from qfdmo.models import ActeurType, Source  # noqa: E402
from qfdmo.models.acteur import ActeurStatus  # noqa: E402


def cluster_acteurs_db_data_read_acteurs(
    model_class: type[Model],
    include_source_ids: list[int],
    include_acteur_type_ids: list[int],
    include_only_if_regex_matches_nom: str,
    include_if_all_fields_filled: list[str],
    exclude_if_any_field_filled: list[str],
    extra_dataframe_fields: list[str],
) -> tuple[pd.DataFrame, str]:
    """Lire les donn√©es des acteurs depuis la DB et retourner un DataFrame
    (+ requ√™te SQL pour d√©bug)

    Sachant qu'on travaille potentiellement avec des propri√©t√©s d√©riv√©es (ex: @property)
    qui n'existent pas en DB, le queryset de Django ne peut pas g√©rer ces propri√©t√©s.

    Donc on fait 2 √©tapes:
    1) Django queryset: o√π on essaye au mieux de filtrer les donn√©es en amont
    2) DataFrame: o√π on ajoute toute la logique non g√©r√©e par Django query (@property,
    filtres plus complexes, etc.)
        bonus debug: on rajoute les codes sources/types

    üü† Concernant les exceptions:
     - oui ce n'est pas une erreurs en soit de ne pas r√©cup√©rer de donn√©es acteurs
        (c'est peut √™tre la r√©alit√© m√©tier)
     - en revanche les pipelines Airflow deviennent complexes avec le risque si
        une t√¢che √©choue de ne pas savoir pourquoi, d'avoir les t√¢ches suivantes
        qui s'ex√©cutent pour rien, d'avoir des effets de bord, etc.
     - en plus de cela: tester les pipelines Airflow de bout en bout n'est pas facile
     => donc on pr√©f√®re simplifier l'approche en soulevant des exceptions d√®s
        que possible via cette fonction

    Args:
        model_class (type[Model]): Le mod√®le Django √† lire, le mettre en param√®tre
            nous permet de choisir Acteur, RevisionActeur ou DisplayedActeur

        ‚ûï include_source_ids (list[int]): Les sources √† inclure

        ‚ûï include_acteur_type_ids (list[int]): Les types d'acteurs √† inclure

        ‚ûï include_only_if_regex_matches_nom (str): acteurs inclus si nom match
            SI pas de regex = pas de filtrage = tous les noms sont inclus

        ‚ûï include_if_all_fields_filled (list[str]): acteurs inclus
            SI TOUS les champs remplis

        ‚ùå exclude_if_any_field_filled (list[str]): acteurs exclus
            SI N'IMPORTE QUEL champ rempli

        üì¶ extra_dataframe_fields (list[str]): Les champs √† rajouter √† la df finale
            MEME si pas utils √† la s√©lection (parce qu'on en a besoin plus
            tard comme pour l'ago de clustering)

    Returns:
        tuple[pd.DataFrame, str]: Le DataFrame des acteurs et la requ√™te SQL utilis√©e
    """

    # -----------------------------------
    # 1) Etape Django queryset
    # -----------------------------------
    # Pour limiter au maximum les donn√©es √† lire en DB
    query = django_model_queryset_generate(
        model_class, include_if_all_fields_filled, exclude_if_any_field_filled
    )
    query = query.filter(source_id__in=include_source_ids)
    query = query.filter(acteur_type_id__in=include_acteur_type_ids)

    # Un filtre en dur pour ne prendre que les acteurs actifs
    query = query.filter(statut=ActeurStatus.ACTIF)

    fields = ["identifiant_unique", "statut", "source_id", "acteur_type_id", "nom"]
    fields += include_if_all_fields_filled
    fields += exclude_if_any_field_filled
    fields += extra_dataframe_fields

    # -----------------------------------
    # 2) Etape DataFrame
    # -----------------------------------
    # Pour appliquer les traitements non g√©r√©s en √©tape 1 (ex: @property)
    df = django_model_queryset_to_df(query, fields)

    # Si une regexp de nom est fournie, on l'applique
    # pour filtrer la df, sinon on garde toute la df
    if include_only_if_regex_matches_nom:
        df = df[
            df["nom"]
            # On applique la normalisation de base √† la vol√©e
            # pour simplifier les regex
            .map(normalize.string_basic).str.contains(
                include_only_if_regex_matches_nom, na=False, regex=True
            )
        ].copy()

    # Cons√©quence de tol√©rer des chaines vides en base: on converti tout le
    # vide en None pour simplifier l'inclusion/exclusion qui suit
    df = df.replace({"": None, np.nan: None})

    # On ne garde que les lignes o√π TOUS les champs sont remplis
    df = df[df[include_if_all_fields_filled].notna().all(axis=1)].copy()

    # On exclude les lignes o√π N'IMPORTE QUEL champ est rempli
    df = df[~df[exclude_if_any_field_filled].notna().any(axis=1)].copy()

    if df.empty:
        raise ValueError("Dataframe vide apr√®s filtrage")

    # -----------------------------------
    # Bonus debug
    # -----------------------------------
    # Ajout des codes sources et types d'acteurs puisqu'ils sont
    # directements li√©s au filtrage, et d√©bugger une pipeline
    # avec des IDs uniquement est tr√®s compliqu√©
    mapping_source_codes_by_ids = {x.id: x.code for x in Source.objects.all()}
    mapping_acteur_type_codes_by_ids = {x.id: x.code for x in ActeurType.objects.all()}
    df["source_code"] = df["source_id"].map(mapping_source_codes_by_ids)
    df["acteur_type_code"] = df["acteur_type_id"].map(mapping_acteur_type_codes_by_ids)

    return df, django_model_queryset_to_sql(query)
