"""DAG which generates clustering suggestions for acteurs"""

from airflow import DAG
from airflow.models.param import Param
from cluster.config.constants import FIELDS_PARENT_DATA_EXCLUDED
from cluster.config.model import ClusterConfig
from cluster.tasks.airflow_logic.chain_tasks import chain_tasks
from cluster.ui import params_separators as UI_PARAMS_SEPARATORS
from shared.config.start_dates import START_DATES
from shared.config.tags import TAGS
from utils.airflow_params import airflow_params_dropdown_from_mapping
from utils.django import django_model_fields_get, django_setup_full

django_setup_full()
from qfdmo.models import Acteur, ActeurType, Source  # noqa: E402

# -------------------------------------------
# Manage dropdowns in Airflow
# -------------------------------------------
# Beware of performance impact, see min_file_process_interval
# https://airflow.apache.org/docs/apache-airflow/stable/configurations-ref.html#config-scheduler-min-file-process-interval
# https://airflow.apache.org/docs/apache-airflow/stable/best-practices.html#top-level-python-code
# But OK for now given low amount of requested data

# Get data from DB
mapping_source_id_by_code = {obj.code: obj.id for obj in Source.objects.all()}
mapping_acteur_type_id_by_code = {obj.code: obj.id for obj in ActeurType.objects.all()}
# Create dropdowns
dropdown_sources = airflow_params_dropdown_from_mapping(mapping_source_id_by_code)
dropdown_acteur_types = airflow_params_dropdown_from_mapping(
    mapping_acteur_type_id_by_code
)

fields_all = django_model_fields_get(Acteur)
fields_enrich = sorted(
    list(
        # Can't want to enrich calculated properties
        set(django_model_fields_get(Acteur, include_properties=False))
        # Exclude some fields based on business rules (ex: source)
        - set(FIELDS_PARENT_DATA_EXCLUDED)
    )
)
fields_enrich_excluded = list(set(fields_all) - set(fields_enrich))

# To display protected fields in UI without breaking it
# (Airflow UI doesn't wrap, it creates a long line which messes up inputs)
fields_enrich_excluded_ui = [
    fields_enrich_excluded[i : i + 5] for i in range(0, len(fields_enrich_excluded), 5)
]

exclus_string = "  \n".join([", ".join(chunck) for chunck in fields_enrich_excluded_ui])

DAG_ID = "cluster_acteur_suggestions"
PARAMS = {
    "dry_run": Param(
        True,
        type="boolean",
        description_md=f"""
            üö± Si coch√©, aucune t√¢che d'√©criture ne sera effectu√©e.
            Ceci permet de tester le DAG rapidement sans peur de
            casser quoi que ce soit (it√©rer plus vite)
            (ex: pas d'√©criture des suggestions en DB,
            donc pas visible dans Django Admin).
            {UI_PARAMS_SEPARATORS.READ_ACTEURS}""",
    ),
    # TODO: permettre de ne s√©lectionner aucune source = toutes les sources
    "include_sources": Param(
        [],
        type=["null", "array"],
        # La terminologie Airflow n'est pas tr√®s heureuse
        # mais "examples" est bien la fa√ßon de faire des dropdowns
        # voir https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/params.html
        examples=dropdown_sources,
        description_md="""**‚ûï INCLUSION ACTEURS**: seuls ceux qui proviennent
            de ces sources (op√©rateur **OU/OR**)

            üíØ Si aucune valeur sp√©cifi√©e =  tous les acteurs sont inclus
            """,
    ),
    "include_acteur_types": Param(
        [],
        type="array",
        examples=dropdown_acteur_types,
        description_md="""**‚ûï INCLUSION ACTEURS**: ceux qui sont de ces types
             (op√©rateur **OU/OR**)""",
    ),
    "include_only_if_regex_matches_nom": Param(
        "",
        type=["null", "string"],
        description_md="""**‚ûï INCLUSION ACTEURS**: ceux dont le champ 'nom'
            correspond √† cette expression r√©guli√®re ([voir recettes](https://www.notion.so/accelerateur-transition-ecologique-ademe/Expressions-r-guli-res-regex-1766523d57d780939a37edd60f367b75))

            üßπ Note: la normalisation basique est appliqu√©e √† la vol√©e sur ce
            champ avant l'application de la regex pour simplifier les expressions

            0Ô∏è‚É£ Si aucune valeur sp√©cifi√©e =  cette option n'a PAS d'effet""",
    ),
    "include_if_all_fields_filled": Param(
        ["code_postal"],
        type="array",
        examples=fields_all,
        description_md="""**‚ûï INCLUSION ACTEURS**: ceux dont tous ces champs
            sont **remplis** (op√©rateur **ET/AND**)

            exemple: travailler uniquement sur les acteurs avec SIRET
             """,
    ),
    "exclude_if_any_field_filled": Param(
        [],
        type=["null", "array"],
        examples=fields_all,
        description_md=f"""**üõë EXCLUSION ACTEURS**: ceux dont n'importe quel
            de ces champs est **rempli** (op√©rateur **OU/OR**)

            exemple: travailler uniquement sur les acteurs SANS SIRET

            0Ô∏è‚É£ Si aucune valeur sp√©cifi√©e =  cette option n'a PAS d'effet
            {UI_PARAMS_SEPARATORS.READ_PARENTS}
            """,
    ),
    "include_parents_only_if_regex_matches_nom": Param(
        "",
        type=["null", "string"],
        description_md=f"""**‚ûï INCLUSION PARENTS**: ceux dont le champ 'nom'
            correspond √† cette expression r√©guli√®re ([voir recettes](https://www.notion.so/accelerateur-transition-ecologique-ademe/Expressions-r-guli-res-regex-1766523d57d780939a37edd60f367b75))

            üßπ Note: la normalisation basique est appliqu√©e √† la vol√©e sur ce
            champ avant l'application de la regex pour simplifier les expressions

            0Ô∏è‚É£ Si aucune valeur sp√©cifi√©e =  cette option n'a PAS d'effet

            {UI_PARAMS_SEPARATORS.NORMALIZATION}""",
    ),
    "normalize_fields_basic": Param(
        [],
        type=["null", "array"],
        examples=fields_all,
        description_md=r"""Les champs √† normaliser de mani√®re basique:
             - minuscule
             - conversion des accents
             - suppression des caract√®res sp√©ciaux et espaces superflus

            exemple: ' Ch√¢teau de l'√Æle' -> 'chateau de l ile'

            üíØ Si aucun champ sp√©cifi√© =  s'applique √† TOUS les champs

            üí° Les normalisations de cette option et des options suivantes
            sont appliqu√©es dans l'ordre de la UI. Plusieurs normalisations
            peuvent √™tre appliqu√©es √† un m√™me champ √† la suite.
            """,
    ),
    "normalize_fields_no_words_size1": Param(
        ["nom"],
        type=["null", "array"],
        examples=fields_all,
        description_md=r"""Les champs √† normaliser en supprimant les mots
            de taille 1.

            exemple: 'Place √† la montagne' -> 'Place la montagne'

            0Ô∏è‚É£ Si aucun champ sp√©cifi√© = s'applique √† AUCUN champ
            """,
    ),
    "normalize_fields_no_words_size2_or_less": Param(
        ["nom"],
        type=["null", "array"],
        examples=fields_all,
        description_md="""Les champs √† normaliser en supprimant les mots
            de taille 2 ou moins.

            exemple: "Place √† la montagne" -> "Place montagne"

            0Ô∏è‚É£ Si aucun champ sp√©cifi√© = s'applique √† AUCUN champ
            """,
    ),
    "normalize_fields_no_words_size3_or_less": Param(
        # Feedback m√©tier: supprimer des mots de taille 3
        # commence √† devenir radical, donc on laisse ce champ
        # vide par d√©faut
        [],
        type=["null", "array"],
        examples=fields_all,
        description_md=r"""Les champs √† normaliser en supprimant les mots
            de taille 3 ou moins.

            exemple: 'rue de la montagne' -> 'montagne'

            0Ô∏è‚É£ Si aucun champ sp√©cifi√© = s'applique √† AUCUN champ
            """,
    ),
    "normalize_fields_order_unique_words": Param(
        [],
        type=["null", "array"],
        examples=fields_all,
        description_md=f"""Les champs √† normaliser en ordonnant les mots
            par ordre alphab√©tique et en supprimant les doublons.

            exemple: 'rue de la montagne rue' -> 'de la montagne rue'

            üíØ Si aucun champ sp√©cifi√© =  s'applique √† TOUS les champs

            {UI_PARAMS_SEPARATORS.CLUSTERING}
            """,
    ),
    "cluster_intra_source_is_allowed": Param(
        False,
        type="boolean",
        description_md="""**üîÑ INTRA-SOURCE**: si coch√©, les acteurs d'une m√™me
            source peuvent √™tre clusteris√©s ensemble""",
    ),
    "cluster_fields_exact": Param(
        ["code_postal", "ville"],
        type="array",
        examples=fields_all,
        description_md=r"""Les champs sur lesquels on fait le groupage exact.
            exemple: ["code_postal", "ville"]""",
    ),
    "cluster_fields_fuzzy": Param(
        ["nom", "adresse"],
        type=["null", "array"],
        examples=fields_all,
        description_md=r"""Les champs sur lesquels on fait le groupage fuzzy.
            exemple: ["code_postal", "ville"]""",
    ),
    "cluster_fuzzy_threshold": Param(
        0.5,
        type="number",
        description_md=f"""Seuil de similarit√© pour le groupage fuzzy.
            0 = pas de similarit√©, 1 = similarit√© parfaite

            {UI_PARAMS_SEPARATORS.DEDUP_CHOOSE_PARENT}

            {UI_PARAMS_SEPARATORS.DEDUP_ENRICH_PARENT}""",
    ),
    "dedup_enrich_fields": Param(
        fields_enrich,
        type=["array"],
        examples=fields_enrich,
        description_md=f"""‚úçÔ∏è Champs √† enrichir (certains champs de type calcul√©s ou id
        sont exclus)

        Exclus:
        {exclus_string}
        """,
    ),
    "dedup_enrich_exclude_sources": Param(
        [],
        type=["null", "array"],
        examples=dropdown_sources,
        description_md="""**‚ùå EXCLUSIONS SOURCES**: sources sur lequelles
            ne **JAMAIS** prendre de donn√©es""",
    ),
    "dedup_enrich_priority_sources": Param(
        [],
        type=["array"],
        examples=dropdown_sources,
        description_md=r"""**üî¢ PRIORITES SOURCES**: sources sur lequelles
            on **PR√âF√àRE** prendre de donn√©es

            üî¥ BUG UI AIRFLOW: ne s√©lectionner qu'une valeur car l'ordre
            n'est pas garanti üî¥
            voir https://github.com/apache/airflow/discussions/46475

            Ce n'est pas parce qu'une source est prioritaire qu'on va
            n√©cessairement en tirer de la donn√©e
            """,
    ),
    "dedup_enrich_keep_empty": Param(
        False,
        type="boolean",
        description_md=r"""**‚àÖ CONSERVER LE VIDE**: si OUI et qu'une valeur
        vide est rencontr√©e sur une source prioritaire, alors elle sera
        conserv√©e.
        **Cette option n'est appliqu√©e que lors de la mis √† jour du parent**""",
    ),
    "dedup_enrich_keep_parent_data_by_default": Param(
        True,
        type="boolean",
        description_md=r"""
** CONSERVER LES DONN√âES DU PARENT**: si OUI, les donn√©es du parent seront conserv√©es.

Dans le cas de la mise √† jour du parent, lorsque l'option `dedup_enrich_keep_empty` est:
 - VRAI, toutes les donn√©es du parent m√™me vides sont conserv√©es
 - FAUX, seules les donn√©es non-vides du parent sont conserv√©es
""",
    ),
}

# Detect if Airflow params aren't aligned with Conf model without running DAG
keys_missing_in_conf = list(set(PARAMS.keys()) - set(ClusterConfig.model_fields))
if keys_missing_in_conf:
    raise ValueError(f"Param Airflow {keys_missing_in_conf} non trouv√©(s) en config")

with DAG(
    dag_id=DAG_ID,
    dag_display_name="Cluster - Suggestions",
    default_args={
        "owner": "airflow",
        "depends_on_past": False,
        "email_on_failure": False,
        "email_on_retry": False,
        "retries": 0,
    },
    start_date=START_DATES.DEFAULT,
    description=("Un DAG pour g√©n√©rer des suggestions de clustering pour les acteurs"),
    tags=[TAGS.CLUSTER, TAGS.ACTEURS, TAGS.SUGGESTIONS, TAGS.CLUSTERING],
    params=PARAMS,
) as dag:
    chain_tasks(dag)
