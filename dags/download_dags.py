import logging
from datetime import datetime, timedelta
from pathlib import Path

import airflow.configuration as conf
import decouple
from airflow import DAG
from airflow.operators.python import PythonOperator
from airflow.providers.amazon.aws.hooks.s3 import S3Hook

BUCKET_NAME = "qfdmo-airflow-dags"


def download_dags_from_s3():
    dags_folder = conf.get("core", "dags_folder")
    if not isinstance(dags_folder, str):
        raise ValueError("dags_folder is not set")
    environment = decouple.config("ENVIRONMENT", default=None)
    if not environment:
        raise ValueError("ENVIRONMENT is not set")
    if environment in ["preprod", "production"]:
        s3_hook = S3Hook(aws_conn_id="s3dags")

        logging.warning(
            f"Downloading {BUCKET_NAME}/{environment} from S3 to {dags_folder}"
        )
        file_path = Path(dags_folder)
        file_path.unlink(missing_ok=True)
        s3_hook.download_file(
            environment,
            bucket_name=BUCKET_NAME,
            local_path=file_path,
            preserve_file_name=True,
            use_autogenerated_subdir=False,
        )
    else:
        logging.warning(f"Skipping download_dags_from_s3 in environmen `{environment}`")


default_args = {
    "owner": "airflow",
    "depends_on_past": False,
    "start_date": datetime(2022, 1, 1),
    "email_on_failure": False,
    "email_on_retry": False,
    "retries": 1,
    "retry_delay": timedelta(minutes=5),
}

with DAG(
    "download_dags_from_s3",
    default_args=default_args,
    description="DAG to download dags from S3",
    schedule_interval=timedelta(days=1),
    catchup=False,
) as dag:

    download_dags = PythonOperator(
        task_id="download_dags_from_s3", python_callable=download_dags_from_s3, dag=dag
    )

    download_dags
