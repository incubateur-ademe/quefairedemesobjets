# Generated by Django 5.1.1 on 2024-10-12 07:55

import logging

from django.db import migrations

mapping = {
    "ECODDS": {"old_code": "", "new_code": "ecodds"},
    "Emmaus Connect": {"old_code": "emmaus_connect", "new_code": "emmausconnect"},
    "RecyclOptics": {"old_code": "RecyclOptics", "new_code": "recycloptics"},
    "Emmaüs Défi": {"old_code": "", "new_code": "emmausdefi"},
    "Lunettes de Zac": {"old_code": "lunettes_de_zac", "new_code": "lunettesdezac"},
    "CRAR Normandie": {"old_code": "crar_normandie", "new_code": "crarnormandie"},
    "Syvadec": {"old_code": "", "new_code": "syvadec"},
    "ALIAPUR": {"old_code": "", "new_code": "aliapur"},
    "Ville de Paris": {"old_code": "ville_de_paris", "new_code": "villedeparis"},
    "Le REFER": {"old_code": "le_refer", "new_code": "lerefer"},
    "Origine Cycles": {"old_code": "origine_cycles", "new_code": "originecycles"},
    "Réseau National des Ressourceries et Recycleries": {
        "old_code": "reseau_national_des_ressourceries_et_recycleries",
        "new_code": "ressourceries",
    },
    "Recyclivre - Boîtes à lire": {
        "old_code": "recyclivre_-_boites_a_lire",
        "new_code": "recyclivrebal",
    },
    "Association des Ludothèques Françaises": {
        "old_code": "",
        "new_code": "ludotheques",
    },  # cas spécial, pas de code -> correction id unique -> id externe
    "Bibliothèques - Ministère de la culture": {
        "old_code": "",
        "new_code": "bibliotheques",
    },  # cas spécial, pas de code  -> correction id unique -> id externe
    "ADEME - SINOE": {
        "old_code": "",
        "new_code": "sinoe",
    },  # cas spécial, code au milieu de l'identifiant
    "ADEME - Initiatives locales": {
        "old_code": "",
        "new_code": "ademelocales",
    },  # cas spécial, pas de code
    "ADEME - Acteurs digitaux": {
        "old_code": "",
        "new_code": "ademedigitaux",
    },  # cas spécial, pas de code
    "ADEME - Initiatives nationales": {
        "old_code": "",
        "new_code": "ademenationales",
    },  # cas spécial, pas de code
    "CartEco - ESS France": {
        "old_code": "carteco_-_ess_france",
        "new_code": "carteco",
    },  # carteco & carteco_-_ess_france
    "ADEME - Locations": {
        "old_code": "",
        "new_code": "ademelocation",
    },  # cas spécial, pas de code
    # "openstreetmap": {
    #     "old_code": "",
    #     "new_code": "",
    # },  # cas spécial, que 4 points 'DEL', n'est ce pas de la contribution équipe ?
    "ADELPHE": {"old_code": "adelphe", "new_code": "adelphe"},  # 1 seul acteur ?
    "ALCOME": {"old_code": "", "new_code": "alcome"},  # 0 acteur
    "ECOMAISON": {"old_code": "ecomaison", "new_code": "ecomaison"},
    "APER": {"old_code": "", "new_code": "aper"},  # 0 acteur
    "Communauté Longue Vie Aux Objets": {
        "old_code": "communaute_longue_vie_aux_objets",
        "new_code": "communautelvao",
    },
    "Groupe Findis": {"old_code": "", "new_code": "findis"},  # cas special, pas de code
    "CITEO": {"old_code": "", "new_code": "citeo"},
    "Collectif Encore": {"old_code": "", "new_code": "encore"},
    "CYCLAMED": {"old_code": "", "new_code": "cyclamed"},
    "CYCLEVIA": {"old_code": "", "new_code": "cyclevia"},  # 0 acteur
    "DASTRI": {"old_code": "", "new_code": "dastri"},  # 0 acteur
    "Collectivité Ambert Livradois Forez": {
        "old_code": "collectivite_ambert_livradois_forez",
        "new_code": "alv",
    },
    "Fédération Envie": {"old_code": "", "new_code": "envie"},
    #    "equipe": {"old_code": "", "new_code": ""},
    "COREPILE": {"old_code": "", "new_code": "corepile"},
    "ECOLOGIC": {"old_code": "", "new_code": "ecologic"},
    "VALDELIA": {"old_code": "", "new_code": "valdelia"},
    "VALOBAT": {"old_code": "", "new_code": "valobat"},
    "ECOMINERO": {"old_code": "", "new_code": "ecominero"},
    "PYREO": {"old_code": "", "new_code": "pyreo"},
    "GIE FRP": {"old_code": "", "new_code": "giefrp"},
    "LEKO": {"old_code": "", "new_code": "leko"},
    "SCRELEC": {"old_code": "", "new_code": "screlec"},
    "TYVAL": {"old_code": "", "new_code": "tyval"},
    "REFASHION": {"old_code": "", "new_code": "refashion"},
    "Recyclivre - Point livres": {
        "old_code": "recyclivre_-_point_livres",
        "new_code": "recyclivrepl",
    },
    "ADEME_SINOE_Decheteries": {
        "old_code": "ademe_sinoe_decheteries",
        "new_code": "ademesinoedecheteries",
    },
    "Longue Vie Aux Objets": {
        "old_code": "",
        "new_code": "lvao",
    },  # il y a à boire et à manger
    "ECOSYSTEM": {"old_code": "", "new_code": "ecosystem"},
    "SOREN": {"old_code": "", "new_code": "soren"},
    "Ordre National Des Pharmaciens": {
        "old_code": "ordredespharmaciens",
        "new_code": "ordredespharmaciens",
    },
    "Leroy Merlin": {"old_code": "", "new_code": "leroymerlin"},
    "la_poste": {"old_code": "", "new_code": "laposte"},
    "cma_reparacteur": {"old_code": "cma_reparacteur", "new_code": "cmareparacteur"},
}

MAPPING_ACTEUR_ID_TABLE = {
    "qfdmo_acteur": "identifiant_unique",
    "qfdmo_revisionacteur": "identifiant_unique",
    "qfdmo_acteur_acteur_services": "acteur_id",
    "qfdmo_acteur_labels": "acteur_id",
    "qfdmo_propositionservice": "acteur_id",
    "qfdmo_revisionacteur_acteur_services": "revisionacteur_id",
    "qfdmo_revisionacteur_labels": "revisionacteur_id",
    "qfdmo_revisionpropositionservice": "acteur_id",
}


def update_acteur_source_code(apps, schema_editor):
    Source = apps.get_model("qfdmo", "Source")
    Acteur = apps.get_model("qfdmo", "Acteur")
    RevisionActeur = apps.get_model("qfdmo", "RevisionActeur")
    PropositionService = apps.get_model("qfdmo", "PropositionService")
    RevisionPropositionService = apps.get_model("qfdmo", "RevisionPropositionService")

    acteur_count = Acteur.objects.count()
    revision_acteur_count = RevisionActeur.objects.count()
    proposition_service_count = PropositionService.objects.count()
    revision_proposition_service_count = RevisionPropositionService.objects.count()

    schema_editor.execute("SET CONSTRAINTS ALL DEFERRED;")
    for code, map in mapping.items():
        Source.objects.filter(code=code).update(code=map["new_code"])
        for table_name, acteur_id_field in MAPPING_ACTEUR_ID_TABLE.items():
            if map["old_code"] and map["new_code"] != map["old_code"]:
                old_code = map["old_code"]
                new_code = map["new_code"]
                sql = f"""
                UPDATE {table_name}
                SET {acteur_id_field} = REPLACE({acteur_id_field}, %s, %s)
                WHERE {acteur_id_field} LIKE %s;
                """
                logging.warning(
                    f"Executing SQL: {sql} with params: {old_code}, {new_code}, {old_code}%"
                )
                schema_editor.execute(sql, [old_code, new_code, f"{old_code}%"])
    schema_editor.execute("SET CONSTRAINTS ALL IMMEDIATE;")

    assert acteur_count == Acteur.objects.count()
    assert revision_acteur_count == RevisionActeur.objects.count()
    assert proposition_service_count == PropositionService.objects.count()
    assert (
        revision_proposition_service_count == RevisionPropositionService.objects.count()
    )


def rollback_acteur_source_code(apps, schema_editor):
    Source = apps.get_model("qfdmo", "Source")
    schema_editor.execute("SET CONSTRAINTS ALL DEFERRED;")
    for code, map in mapping.items():
        Source.objects.filter(code=code).update(code=map["new_code"])
        for table_name, acteur_id_field in MAPPING_ACTEUR_ID_TABLE.items():
            if map["old_code"] and map["new_code"] != map["old_code"]:
                old_code = map["old_code"]
                new_code = map["new_code"]
                sql = f"""
                UPDATE {table_name}
                SET {acteur_id_field} = REPLACE({acteur_id_field}, %s, %s)
                WHERE {acteur_id_field} LIKE %s;
                """
                logging.warning(
                    f"Executing SQL: {sql} with params: {new_code}, {old_code}, {new_code}%"
                )
                schema_editor.execute(sql, [{new_code}, {old_code}, f"{new_code}%"])
    schema_editor.execute("SET CONSTRAINTS ALL IMMEDIATE;")


class Migration(migrations.Migration):

    dependencies = [
        ("qfdmo", "0108_remove_lvaobaserevision_lvao_base_and_more"),
    ]

    operations = [
        migrations.RunPython(update_acteur_source_code, rollback_acteur_source_code),
    ]
