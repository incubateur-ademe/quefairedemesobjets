# Generated by Django 5.1.4 on 2025-02-03 13:04

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ("qfdmo", "0118_toutacteur"),
    ]

    operations = [
        migrations.RunSQL(
            """
DROP VIEW IF EXISTS qfdmo_toutacteur;

CREATE VIEW qfdmo_toutacteur AS (
    SELECT
        a.identifiant_unique AS identifiant_unique,
        COALESCE(ra.nom, a.nom) AS nom,
        COALESCE(ra.description, a.description) AS description,
        COALESCE(ra.acteur_type_id, a.acteur_type_id) AS acteur_type_id,
        COALESCE(ra.adresse, a.adresse) AS adresse,
        COALESCE(ra.adresse_complement, a.adresse_complement) AS adresse_complement,
        COALESCE(ra.code_postal, a.code_postal) AS code_postal,
        COALESCE(ra.ville, a.ville) AS ville,
        COALESCE(ra.url, a.url) AS url,
        COALESCE(ra.email, a.email) AS email,
        COALESCE(ra.location, a.location) AS location,
        COALESCE(ra.telephone, a.telephone) AS telephone,
        COALESCE(ra.nom_commercial, a.nom_commercial) AS nom_commercial,
        COALESCE(ra.nom_officiel, a.nom_officiel) AS nom_officiel,
        COALESCE(ra.siren, a.siren) AS siren,
        COALESCE(ra.siret, a.siret) AS siret,
        COALESCE(ra.source_id, a.source_id) AS source_id,
        COALESCE(ra.identifiant_externe, a.identifiant_externe) AS identifiant_externe,
        COALESCE(ra.statut, a.statut) AS statut,
        COALESCE(ra.naf_principal, a.naf_principal) AS naf_principal,
        COALESCE(ra.commentaires, a.commentaires) AS commentaires,
        COALESCE(ra.horaires_osm, a.horaires_osm) AS horaires_osm,
        COALESCE(ra.horaires_description, a.horaires_description) AS horaires_description,
        COALESCE(ra.public_accueilli, a.public_accueilli) AS public_accueilli,
        COALESCE(ra.reprise, a.reprise) AS reprise,
        COALESCE(ra.exclusivite_de_reprisereparation, a.exclusivite_de_reprisereparation) AS exclusivite_de_reprisereparation,
        COALESCE(ra.uniquement_sur_rdv, a.uniquement_sur_rdv) AS uniquement_sur_rdv,
        COALESCE(ra.action_principale_id, a.action_principale_id) AS action_principale_id,
        a.cree_le AS cree_le,
        COALESCE(ra.modifie_le, a.modifie_le) AS modifie_le,
        ra.parent_id AS parent_id
        --proposition_services
    FROM qfdmo_acteur AS a
    LEFT OUTER JOIN qfdmo_revisionacteur AS ra
    ON a.identifiant_unique = ra.identifiant_unique
);
""",
            reverse_sql="""
DROP VIEW IF EXISTS qfdmo_toutacteur;
""",
        ),
        migrations.RunSQL(
            """
DROP VIEW IF EXISTS qfdmo_toutacteur_labels;

-- Cr√©er la vue
CREATE VIEW qfdmo_toutacteur_labels AS (
    SELECT
        CASE
            WHEN ra.identifiant_unique IS NULL THEN al.id
            ELSE ral.id
        END AS id,
        CASE
            WHEN ra.identifiant_unique IS NOT NULL THEN ral.revisionacteur_id
            ELSE al.acteur_id
        END AS toutacteur_id,
        CASE
            WHEN ra.identifiant_unique IS NOT NULL THEN ral.labelqualite_id
            ELSE al.labelqualite_id
        END AS labelqualite_id
    FROM qfdmo_acteur_labels AS al
    full join qfdmo_revisionacteur_labels AS ral on al.acteur_id = ral.revisionacteur_id
    left join qfdmo_revisionacteur AS ra on al.acteur_id = ra.identifiant_unique
    where CASE
            WHEN ra.identifiant_unique IS NULL THEN al.id
            ELSE ral.id
        END  is not null
);
""",
            reverse_sql="""
DROP VIEW IF EXISTS qfdmo_toutacteur_labels;
""",
        ),
        migrations.RunSQL(
            """
DROP VIEW IF EXISTS qfdmo_toutacteur_acteur_services;

CREATE VIEW qfdmo_toutacteur_acteur_services AS (
    SELECT
        CASE
            WHEN ra.identifiant_unique IS NULL THEN aas.id
            ELSE raas.id
        END AS id,
        CASE
            WHEN ra.identifiant_unique IS NOT NULL THEN raas.revisionacteur_id
            ELSE aas.acteur_id
        END AS toutacteur_id,
        CASE
            WHEN ra.identifiant_unique IS NOT NULL THEN raas.acteurservice_id
            ELSE aas.acteurservice_id
        END AS acteurservice_id
    FROM qfdmo_acteur_acteur_services AS aas
    full join qfdmo_revisionacteur_acteur_services AS raas on aas.acteur_id = raas.revisionacteur_id
    left join qfdmo_revisionacteur AS ra on aas.acteur_id = ra.identifiant_unique
    where CASE
            WHEN ra.identifiant_unique IS NULL THEN aas.id
            ELSE raas.id
        END  is not null
);
""",
            reverse_sql="""
DROP VIEW IF EXISTS qfdmo_toutacteur_acteur_services;
""",
        ),
    ]
