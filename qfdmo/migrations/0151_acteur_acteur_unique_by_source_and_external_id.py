# Generated by Django 5.1.6 on 2025-04-15 07:15

from django.db import migrations, models
from django.db.models import Count

from qfdmo.models.acteur import ActeurStatus


def suffix_external_id_for_digitals(apps, schema_editor):
    Acteur = apps.get_model("qfdmo", "Acteur")
    for acteur in Acteur.objects.filter(acteur_type__code="digital"):
        if (
            not acteur.identifiant_externe.endswith("_d")
            and acteur.identifiant_unique.endswith("_d")
            and acteur.identifiant_externe in acteur.identifiant_unique
        ):
            acteur.identifiant_externe = f"{acteur.identifiant_externe}_d"
            acteur.save()


def index_external_ids(apps, schema_editor):
    Acteur = apps.get_model("qfdmo", "Acteur")
    # Trouver tous les couples source_id/identifiant_externe en doublon
    acteur_with_same_couple = (
        Acteur.objects.filter(
            source_id__isnull=False, identifiant_externe__isnull=False
        )
        .values("source_id", "identifiant_externe")
        .annotate(count=Count("identifiant_unique"))
        .filter(count__gt=1)
    )

    for couple in acteur_with_same_couple:
        acteurs = Acteur.objects.filter(
            source_id=couple["source_id"],
            identifiant_externe=couple["identifiant_externe"],
        ).order_by(
            "statut"
        )  # ACTIF first

        # Index external_id from the second one
        for i, acteur in enumerate(acteurs[1:], 2):
            nouveau_identifiant = f"{acteur.identifiant_externe}_{i-1}"
            acteur.identifiant_externe = nouveau_identifiant
            acteur.statut = ActeurStatus.INACTIF
            acteur.save()

            print(
                f"Index√©: {couple['source_id']=}, {couple['identifiant_externe']=}, "
                f"nouveau={nouveau_identifiant}, statut={acteur.statut}"
            )


class Migration(migrations.Migration):

    dependencies = [
        ("qfdmo", "0150_acteur_siret_is_closed_and_more"),
    ]

    operations = [
        migrations.RunPython(
            code=suffix_external_id_for_digitals,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.RunPython(
            code=index_external_ids,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.AddConstraint(
            model_name="acteur",
            constraint=models.UniqueConstraint(
                condition=models.Q(("statut", "ACTIF")),
                fields=("source_id", "identifiant_externe"),
                name="acteur_unique_by_source_and_external_id",
            ),
        ),
    ]
