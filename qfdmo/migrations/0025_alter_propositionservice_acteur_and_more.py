# Generated by Django 4.2.6 on 2023-10-27 06:25

import django.db.models.deletion
from django.db import migrations, models


def update_identifiant_unique_as_pk(apps, schema_editor):
    Acteur = apps.get_model("qfdmo", "Acteur")
    RevisionActeur = apps.get_model("qfdmo", "RevisionActeur")
    PropositionService = apps.get_model("qfdmo", "PropositionService")
    RevisionPropositionService = apps.get_model("qfdmo", "RevisionPropositionService")

    counter = 0
    total = (
        PropositionService.objects.count() + RevisionPropositionService.objects.count()
    )
    for p in PropositionService.objects.all():
        counter += 1
        acteur = Acteur.objects.get(id=p.acteur_id)
        p.acteur_id = acteur.identifiant_unique
        p.save()
        if counter % 100 == 0:
            print(f"processing : {counter}/{total}")
    for p in RevisionPropositionService.objects.all():
        counter += 1
        revision_acteur = RevisionActeur.objects.get(id=p.revision_acteur_id)
        p.revision_acteur_id = revision_acteur.identifiant_unique
        p.save()
        if counter % 100 == 0:
            print(f"processing : {counter}/{total}")


def update_id_as_pk(apps, schema_editor):
    Acteur = apps.get_model("qfdmo", "Acteur")
    RevisionActeur = apps.get_model("qfdmo", "RevisionActeur")
    PropositionService = apps.get_model("qfdmo", "PropositionService")
    RevisionPropositionService = apps.get_model("qfdmo", "RevisionPropositionService")

    for p in PropositionService.objects.all():
        acteur = Acteur.objects.get(identifiant_unique=p.acteur_id)
        p.acteur_id = acteur.id
        p.save()
    for p in RevisionPropositionService.objects.all():
        revision_acteur = RevisionActeur.objects.get(
            identifiant_unique=p.revision_acteur_id
        )
        p.revision_acteur_id = revision_acteur.id
        p.save()


class Migration(migrations.Migration):
    dependencies = [
        ("qfdmo", "0024_alter_correctionacteur_correction_statut"),
    ]

    operations = [
        migrations.RunSQL(
            """
            DROP MATERIALIZED VIEW IF EXISTS qfdmo_finalpropositionservice_sous_categories;
            DROP MATERIALIZED VIEW IF EXISTS qfdmo_finalpropositionservice;
            DROP MATERIALIZED VIEW IF EXISTS qfdmo_finalacteur;
            """,
            """
            DROP MATERIALIZED VIEW IF EXISTS qfdmo_finalacteur;
            CREATE MATERIALIZED VIEW qfdmo_finalacteur AS
                SELECT
                      COALESCE(ra.id, a.id) as id
                    , COALESCE(ra.nom, a.nom) as nom
                    , COALESCE(ra.identifiant_unique, a.identifiant_unique) as identifiant_unique
                    , COALESCE(ra.acteur_type_id, a.acteur_type_id) as acteur_type_id
                    , COALESCE(ra.adresse, a.adresse) as adresse
                    , COALESCE(ra.adresse_complement, a.adresse_complement) as adresse_complement
                    , COALESCE(ra.code_postal, a.code_postal) as code_postal
                    , COALESCE(ra.ville, a.ville) as ville
                    , COALESCE(ra.url, a.url) as url
                    , COALESCE(ra.email, a.email) as email
                    , COALESCE(ra.location, a.location) as location
                    , COALESCE(ra.telephone, a.telephone) as telephone
                    , COALESCE(ra.multi_base, a.multi_base) as multi_base
                    , COALESCE(ra.nom_commercial, a.nom_commercial) as nom_commercial
                    , COALESCE(ra.nom_officiel, a.nom_officiel) as nom_officiel
                    , COALESCE(ra.manuel, a.manuel) as manuel
                    , COALESCE(ra.label_reparacteur, a.label_reparacteur) as label_reparacteur
                    , COALESCE(ra.siret, a.siret) as siret
                    , COALESCE(ra.source_id, a.source_id) as source_id
                    , COALESCE(ra.identifiant_externe, a.identifiant_externe) as identifiant_externe
                    , COALESCE(ra.statut, a.statut) as statut
                    , COALESCE(ra.cree_le, a.cree_le) as cree_le
                    , COALESCE(ra.modifie_le, a.modifie_le) as modifie_le
                    , COALESCE(ra.naf_principal, a.naf_principal) as naf_principal
                    , COALESCE(ra.commentaires, a.commentaires) as commentaires
                FROM qfdmo_acteur a
                LEFT OUTER JOIN qfdmo_revisionacteur AS ra ON ra.id = a.id;
                CREATE UNIQUE INDEX ON qfdmo_finalacteur(id);
            CREATE MATERIALIZED VIEW qfdmo_finalpropositionservice AS
                SELECT row_number() OVER (ORDER BY a.id) as id,
                    a.id AS acteur_id,
                    COALESCE(rps.action_id, ps.action_id) AS action_id,
                    COALESCE(rps.acteur_service_id, ps.acteur_service_id) AS acteur_service_id
                FROM qfdmo_acteur AS a
                LEFT OUTER JOIN qfdmo_revisionacteur AS ra ON a.id = ra.id
                LEFT OUTER JOIN qfdmo_propositionservice AS ps ON ps.acteur_id = a.id AND ra.id IS NULL
                LEFT OUTER JOIN qfdmo_revisionpropositionservice AS rps ON rps.revision_acteur_id = a.id;
            CREATE UNIQUE INDEX ON qfdmo_finalpropositionservice(id);
            CREATE MATERIALIZED VIEW qfdmo_finalpropositionservice_sous_categories AS
                SELECT row_number() OVER (ORDER BY a.id) as id,
                	fps.id AS finalpropositionservice_id,
                    COALESCE(rps_sc.souscategorieobjet_id, ps_sc.souscategorieobjet_id) AS souscategorieobjet_id
                FROM qfdmo_acteur AS a
                LEFT OUTER JOIN qfdmo_revisionacteur AS ra ON a.id = ra.id
                LEFT OUTER JOIN qfdmo_propositionservice AS ps ON ps.acteur_id = a.id AND ra.id IS NULL
                LEFT OUTER JOIN qfdmo_revisionpropositionservice AS rps ON rps.revision_acteur_id = a.id
                LEFT OUTER JOIN qfdmo_finalpropositionservice AS fps ON fps.acteur_id = a.id AND fps.action_id = COALESCE(rps.action_id, ps.action_id) and COALESCE(rps.acteur_service_id, ps.acteur_service_id) = fps.acteur_service_id
                LEFT OUTER JOIN qfdmo_propositionservice_sous_categories AS ps_sc ON ps_sc.propositionservice_id = ps.id AND ps.id IS NOT NULL
                LEFT OUTER JOIN qfdmo_revisionpropositionservice_sous_categories AS rps_sc ON rps_sc.revisionpropositionservice_id = rps.id AND rps.id IS NOT NULL
                WHERE (rps_sc.revisionpropositionservice_id IS NOT NULL OR ps_sc.propositionservice_id IS NOT NULL);
            CREATE UNIQUE INDEX ON qfdmo_finalpropositionservice_sous_categories(id);
            """,
        ),
        migrations.AlterField(
            model_name="propositionservice",
            name="acteur",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="proposition_services",
                to="qfdmo.acteur",
                to_field="identifiant_unique",
            ),
        ),
        migrations.AlterField(
            model_name="revisionpropositionservice",
            name="revision_acteur",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="proposition_services",
                to="qfdmo.revisionacteur",
                to_field="identifiant_unique",
            ),
        ),
        migrations.RunPython(update_identifiant_unique_as_pk, update_id_as_pk),
    ]
