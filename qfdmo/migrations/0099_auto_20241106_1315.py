# Generated by Django 5.1.1 on 2024-11-06 08:27

from django.db import migrations

MAPPINGS = [
    {
        "existing_sous_categorie": "outil de bricolage et jardinage",
        "new_sous_categories": [
            "Machines et appareils motorises thermiques",
            "Outil de bricolage et jardinage electrique",
        ],
        "ACTIONS": ["reparer", "donner", "vendre", "louer"],
    }
]


def assign_new_sous_cat(apps, schema_editor):
    # Révision de proposition de service
    # sur proposition de service, si pas revision de proposition de service alors on crée une révision et on corrige les revision de proposition de service
    PropositionService = apps.get_model("qfdmo", "RevisionPropositionService")
    Acteur = apps.get_model("qfdmo", "Acteur")

    RevisionPropositionService = apps.get_model("qfdmo", "RevisionPropositionService")
    SousCategorieObjet = apps.get_model("qfdmo", "SousCategorieObjet")
    for mapping in MAPPINGS:
        existing_sous_categorie = mapping["existing_sous_categorie"]

        # créer les RévisionActeur pour les acteurs qui n'en ont pas et qui sont
        # concernés par l'ajoutde sous catégories
        acteur_ids = (
            PropositionService.objects.filter(
                sous_categories__code=existing_sous_categorie,
                action__code__in=mapping["actions"],
            )
            .exclude(
                acteur_id__in=RevisionPropositionService.objects.values_list(
                    "acteur_id", flat=True
                )
            )
            .values_list("acteur_id", flat=True)
        )
        acteurs = Acteur.objects.filter(id__in=acteur_ids)
        for acteur in acteurs:
            acteur.get_or_create_revision()

        # Collecter les nouvelles sous catégories
        new_sous_categorie_objets = [
            SousCategorieObjet.objets.get(code=code)
            for code in mapping["new_sous_categories"]
        ]

        # Ajouter les nouvelles sous catégories aux RevisionPropositionService
        prop_services = RevisionPropositionService.objects.filter(
            sous_categories__code=existing_sous_categorie,
            action__code__in=mapping["actions"],
        )
        for prop_service in prop_services:
            prop_service.sous_categories.add(new_sous_categorie_objets)


class Migration(migrations.Migration):

    dependencies = [
        ("qfdmo", "0098_alter_action_couleur_alter_groupeaction_couleur"),
    ]

    operations = [migrations.RunPython(assign_new_sous_cat, migrations.RunPython.noop)]
