# Generated by Django 5.1.1 on 2024-10-12 07:55
# inspired by https://github.com/django/django/blob/e03440291b0599934da73b7dfbd2ccf7ec7270d8/django/core/management/commands/inspectdb.py

import argparse

from django.core.management.base import BaseCommand

from qfdmo.models.categorie_objet import SousCategorieObjet

SOUS_CATEGORIES_OBJETS_NOT_REEMPLOI_POSSIBLE = [
    "ampoule",
    "autres_pmcb",
    "batteries_de_mtl",
    "batterie_de_voitures_pour_demarrage",
    "batteries_et_piles_portables",
    "biodechets",
    "bouchons_en_liege",
    "bouteilles_plastique",
    "cartouches",
    "dechets_dangereux_de_pmcb_produits_et_materiaux_de_construction_du_batiment",
    "dechets_de_peintures_vernis_encres_et_colles_produits_chimiques",
    "dechets_de_produits_chimiques",
    "dechets_de_produits_chimiques_acides",
    "dechets_de_produits_chimiques_basiques",
    "dechets_phytosanitaires_menagers_produits_chimiques",
    "dechets_verts",
    "dasri",
    "emballage_carton",
    "emballage_metal",
    "emballage_plastique",
    "emballage_verre",
    "autres_emballages_menagers",
    "encombrants_menagers_divers",
    "huiles_lubrifiantes",
    "medicaments",
    "membranes_bitumineuses_pmcb_produits_et_materiaux_de_construction_du_batiment",
    "papiers_graphiques",
    "petits_appareils_extincteurs",
    "pneu",
    "produits_chimiques_solvants",
    "produits_pyrotechniques",
]


class Command(BaseCommand):
    help = """
Mettre à jour le champ reemploi_possible des sous-catégories d'objets
"""

    def add_arguments(self, parser):
        parser.add_argument(
            "--dry-run",
            help="Executer la commande sans modifier la base de données",
            action=argparse.BooleanOptionalAction,
            default=False,
        )

    def handle(self, *args, **options):
        dry_run = options["dry_run"]

        for sous_categorie_objet_code in SOUS_CATEGORIES_OBJETS_NOT_REEMPLOI_POSSIBLE:
            sous_categorie_objet = SousCategorieObjet.objects.get(
                code=sous_categorie_objet_code
            )
            sous_categorie_objet.reemploi_possible = False
            if dry_run:
                self.stdout.write(
                    self.style.SUCCESS(
                        f"La sous-catégorie d'objet {sous_categorie_objet_code}"
                        " n'est pas réemployable"
                    )
                )
            else:
                sous_categorie_objet.save()
                self.stdout.write(
                    self.style.SUCCESS(
                        f"Sous-catégorie d'objet {sous_categorie_objet_code}"
                        " n'est pas réemployable, elle a été mise à jour"
                    )
                )
