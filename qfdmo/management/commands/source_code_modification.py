# Generated by Django 5.1.1 on 2024-10-12 07:55

import logging

from django.core.management.base import BaseCommand
from django.db import connection, transaction

from qfdmo.models.acteur import Source

MAPPING_ACTEUR_ID_TABLE = {
    "qfdmo_acteur": "identifiant_unique",
    "qfdmo_revisionacteur": "identifiant_unique",
    "qfdmo_acteur_acteur_services": "acteur_id",
    "qfdmo_acteur_labels": "acteur_id",
    "qfdmo_propositionservice": "acteur_id",
    "qfdmo_revisionacteur_acteur_services": "revisionacteur_id",
    "qfdmo_revisionacteur_labels": "revisionacteur_id",
    "qfdmo_revisionpropositionservice": "acteur_id",
}


@transaction.atomic
def update_source_code(old_code, new_code):

    # filtre pour les tests
    if not Source.objects.filter(code=old_code).exists():
        raise ValueError(f"Source with old code {old_code} does not exist")
    if Source.objects.filter(code=new_code).exists():
        raise ValueError(f"Source with new code {new_code} already exist")

    with connection.cursor() as cursor:
        cursor.execute("SET CONSTRAINTS ALL DEFERRED;")

        for table_name, acteur_id_field in MAPPING_ACTEUR_ID_TABLE.items():
            sql = f"""
                UPDATE {table_name}
                SET {acteur_id_field} = REPLACE({acteur_id_field}, %s, %s)
                WHERE {acteur_id_field} LIKE %s;
                """
            logging.warning(
                f"Executing SQL: {sql} with params: {old_code}, {new_code}, {old_code}%"
            )
            cursor.execute(sql, [old_code, new_code, f"{old_code}%"])
        cursor.execute("SET CONSTRAINTS ALL IMMEDIATE;")
        Source.objects.filter(code=old_code).update(code=new_code)


class Command(BaseCommand):
    help = """
Browse acteur correction and remov the acteur which doesn't have activity anymore
"""

    def add_arguments(self, parser):
        parser.add_argument(
            "--old_source_code",
            help="Ancien code de la source",
            type=str,
            required=True,
        )
        parser.add_argument(
            "--new_source_code",
            help="Nouveau code de la source",
            type=str,
            required=True,
        )

    def handle(self, *args, **options):
        old_source_code = options.get("old_source_code")
        new_source_code = options.get("new_source_code")
        update_source_code(old_source_code, new_source_code)
        pass
