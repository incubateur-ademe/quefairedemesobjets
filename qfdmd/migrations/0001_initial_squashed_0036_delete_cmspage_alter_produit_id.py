# Generated by Django 5.1.8 on 2025-06-19 16:25

import django.contrib.postgres.operations
import django.db.models
import django.db.models.deletion
import django.db.models.functions.datetime
import django_extensions.db.fields
import wagtail.fields
import wagtail.search.index
from django.db import migrations, models


class Migration(migrations.Migration):

    replaces = [
        ("qfdmd", "0001_initial"),
        ("qfdmd", "0002_alter_produit_options_remove_produit_sous_categories_and_more"),
        ("qfdmd", "0003_alter_produit_options"),
        ("qfdmd", "0004_remove_produit_titre_produit_libelle_and_more"),
        ("qfdmd", "0005_rename_libelle_produit_nom_produit_bdd_produit_code_and_more"),
        ("qfdmd", "0006_lien"),
        ("qfdmd", "0007_synomyne"),
        ("qfdmd", "0008_synonyme_slug"),
        ("qfdmd", "0009_auto_20241120_1443"),
        ("qfdmd", "0010_produit_picto"),
        ("qfdmd", "0011_alter_produit_picto"),
        ("qfdmd", "0012_suggestion"),
        ("qfdmd", "0013_remove_suggestion_id_alter_suggestion_produit"),
        ("qfdmd", "0014_alter_suggestion_produit"),
        ("qfdmd", "0015_remove_produit_picto_synonyme_picto"),
        ("qfdmd", "0016_alter_produit_comment_les_eviter"),
        ("qfdmd", "0017_synonyme_pin_on_homepage"),
        ("qfdmd", "0018_produit_qu_est_ce_que_j_en_fais_bon_etat_and_more"),
        ("qfdmd", "0019_synonyme_meta_description_and_more"),
        ("qfdmd", "0020_alter_synonyme_meta_description_alter_synonyme_picto_and_more"),
        ("qfdmd", "0021_alter_synonyme_picto"),
        ("qfdmd", "0022_synonyme_comment_les_eviter_and_more"),
        ("qfdmd", "0023_lien_poids"),
        ("qfdmd", "0024_alter_lien_options"),
        ("qfdmd", "0025_remove_lien_produits_alter_produit_nom"),
        ("qfdmd", "0026_produitlien_lien_produits"),
        ("qfdmd", "0027_alter_lien_options_alter_produit_options_and_more"),
        ("qfdmd", "0028_remove_lien_poids"),
        ("qfdmd", "0029_alter_produit_filieres_rep_and_more"),
        ("qfdmd", "0029_cmspage"),
        ("qfdmd", "0030_alter_produitlien_poids"),
        ("qfdmd", "0032_alter_cmspage_poids"),
        ("qfdmd", "0033_alter_synonyme_slug"),
        ("qfdmd", "0034_synonyme_infotri"),
        ("qfdmd", "0035_remove_synonyme_infotri_produit_infotri"),
        ("qfdmd", "0036_delete_cmspage_alter_produit_id"),
    ]

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Lien",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "titre_du_lien",
                    models.CharField(
                        blank=True, help_text="Titre du lien", unique=True
                    ),
                ),
                ("url", models.URLField(blank=True, help_text="URL", max_length=300)),
                ("description", models.TextField(blank=True, help_text="Description")),
            ],
            options={
                "ordering": ("titre_du_lien",),
            },
        ),
        migrations.CreateModel(
            name="Produit",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "modifie_le",
                    models.DateTimeField(
                        auto_now=True,
                        db_default=django.db.models.functions.datetime.Now(),
                    ),
                ),
                (
                    "qu_est_ce_que_j_en_fais_mauvais_etat",
                    models.TextField(
                        blank=True, help_text="Qu'est-ce que j'en fais ? - Mauvais état"
                    ),
                ),
                (
                    "qu_est_ce_que_j_en_fais_bon_etat",
                    models.TextField(
                        blank=True, help_text="Qu'est-ce que j'en fais ? - Bon état"
                    ),
                ),
                (
                    "comment_les_eviter",
                    models.TextField(
                        blank=True, help_text="Comment consommer responsable ?"
                    ),
                ),
                (
                    "que_va_t_il_devenir",
                    models.TextField(blank=True, help_text="Que va-t-il devenir ?"),
                ),
                ("nom", models.CharField(unique=True, verbose_name="Libellé")),
                (
                    "synonymes_existants",
                    models.TextField(
                        blank=True,
                        help_text="Ce champ est obsolète, il n'est actuellement pas mis à jour automatiquement.",
                    ),
                ),
                ("code", models.CharField(blank=True, help_text="Code")),
                ("bdd", models.CharField(blank=True, help_text="Bdd")),
                (
                    "qu_est_ce_que_j_en_fais",
                    models.TextField(
                        blank=True,
                        help_text="Qu'est-ce que j'en fais ? - ANCIEN CHAMP.",
                    ),
                ),
                (
                    "nom_eco_organisme",
                    models.CharField(blank=True, help_text="Nom de l’éco-organisme"),
                ),
                (
                    "filieres_rep",
                    models.CharField(
                        blank=True, help_text="Filière(s) REP concernée(s)"
                    ),
                ),
                (
                    "slug",
                    models.CharField(blank=True, help_text="Slug - ne pas modifier"),
                ),
                (
                    "infotri",
                    wagtail.fields.StreamField(
                        [("image", 0)],
                        blank=True,
                        block_lookup={0: ("wagtail.images.blocks.ImageBlock", [], {})},
                    ),
                ),
            ],
            options={
                "ordering": ("-modifie_le",),
                "abstract": False,
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name="Synonyme",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "modifie_le",
                    models.DateTimeField(
                        auto_now=True,
                        db_default=django.db.models.functions.datetime.Now(),
                    ),
                ),
                (
                    "qu_est_ce_que_j_en_fais_mauvais_etat",
                    models.TextField(
                        blank=True, help_text="Qu'est-ce que j'en fais ? - Mauvais état"
                    ),
                ),
                (
                    "qu_est_ce_que_j_en_fais_bon_etat",
                    models.TextField(
                        blank=True, help_text="Qu'est-ce que j'en fais ? - Bon état"
                    ),
                ),
                (
                    "comment_les_eviter",
                    models.TextField(
                        blank=True, help_text="Comment consommer responsable ?"
                    ),
                ),
                (
                    "que_va_t_il_devenir",
                    models.TextField(blank=True, help_text="Que va-t-il devenir ?"),
                ),
                (
                    "slug",
                    django_extensions.db.fields.AutoSlugField(
                        blank=True,
                        editable=False,
                        max_length=255,
                        populate_from=["nom"],
                    ),
                ),
                (
                    "nom",
                    models.CharField(
                        blank=True, help_text="Nom du produit", unique=True
                    ),
                ),
                (
                    "picto",
                    models.FileField(
                        blank=True,
                        help_text="Ce pictogramme est affiché en page d'accueil s'il est renseigné et si la case ci-dessous est cochée.",
                        null=True,
                        upload_to="pictos",
                    ),
                ),
                (
                    "pin_on_homepage",
                    models.BooleanField(
                        default=False,
                        help_text="Si un pictogramme est renseigné pour ce synonyme, celui-ci s'affichera en page d'accueil. À noter : seuls les 30 premiers synonymes avec la case cochée s'afficheront.",
                        verbose_name="Épingler en page d'accueil",
                    ),
                ),
                (
                    "meta_description",
                    models.TextField(
                        blank=True,
                        verbose_name="Description lue et affichée par les moteurs de recherche.",
                    ),
                ),
                (
                    "produit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="synonymes",
                        to="qfdmd.produit",
                    ),
                ),
            ],
            options={
                "ordering": ("-modifie_le",),
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ProduitLien",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "poids",
                    models.IntegerField(
                        default=0,
                        help_text="Ce champ détermine la position d'un élément dans la liste affichée.<br>Les éléments avec un poids plus élevé apparaissent plus bas dans la liste.<br>Les éléments avec un poids plus faible apparaissent plus haut.",
                    ),
                ),
                (
                    "lien",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="qfdmd.lien"
                    ),
                ),
                (
                    "produit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="qfdmd.produit"
                    ),
                ),
            ],
            options={
                "ordering": ("poids",),
                "unique_together": {("produit", "lien")},
            },
        ),
        migrations.AddField(
            model_name="lien",
            name="produits",
            field=models.ManyToManyField(
                help_text="Produits associés",
                related_name="liens",
                through="qfdmd.ProduitLien",
                to="qfdmd.produit",
            ),
        ),
        migrations.CreateModel(
            name="Suggestion",
            fields=[
                (
                    "produit",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to="qfdmd.synonyme",
                    ),
                ),
            ],
        ),
    ]
