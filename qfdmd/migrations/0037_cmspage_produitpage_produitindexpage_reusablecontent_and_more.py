# Generated by Django 5.1.8 on 2025-06-17 13:13

import django.db.models.deletion
import wagtail.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("qfdmd", "0036_delete_cmspage_alter_produit_id"),
        ("wagtailcore", "0094_alter_page_locale"),
    ]

    operations = [
        migrations.CreateModel(
            name="CMSPage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProduitPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
                ("gender", models.CharField()),
                ("number", models.IntegerField()),
                (
                    "consigne",
                    wagtail.fields.StreamField(
                        [("paragraph", 0), ("reusable", 1)],
                        blank=True,
                        block_lookup={
                            0: (
                                "wagtail.blocks.RichTextBlock",
                                (),
                                {"label": "Texte libre"},
                            ),
                            1: (
                                "wagtail.snippets.blocks.SnippetChooserBlock",
                                ("qfdmd.reusablecontent",),
                                {
                                    "label": "Contenu réutilisable",
                                    "template": "blocks/reusable.html",
                                },
                            ),
                        },
                    ),
                ),
            ],
            options={
                "verbose_name": "Produit",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="ProduitIndexPage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
            ],
            options={
                "verbose_name": "Index des familles & produits",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.CreateModel(
            name="ReusableContent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField()),
                ("content", wagtail.fields.RichTextField()),
            ],
            options={
                "verbose_name": "Contenu réutilisable",
                "verbose_name_plural": "Contenus réutilisable",
            },
        ),
        migrations.CreateModel(
            name="SynonymePage",
            fields=[
                (
                    "page_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="wagtailcore.page",
                    ),
                ),
            ],
            options={
                "verbose_name": "Synonyme de recherche",
                "verbose_name_plural": "Synonymes de recherche",
            },
            bases=("wagtailcore.page",),
        ),
        migrations.AlterField(
            model_name="produit",
            name="id",
            field=models.IntegerField(
                help_text="Correspond à l'identifiant ID défini dans les données <i>Que Faire</i>.",
                primary_key=True,
                serialize=False,
            ),
        ),
        migrations.CreateModel(
            name="FamilyPage",
            fields=[
                (
                    "produitpage_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="qfdmd.produitpage",
                    ),
                ),
            ],
            options={
                "verbose_name": "Famille",
            },
            bases=("qfdmd.produitpage",),
        ),
        migrations.AddField(
            model_name="produitpage",
            name="produit",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="produit_page",
                to="qfdmd.produit",
            ),
        ),
        migrations.AddField(
            model_name="produitpage",
            name="synonyme",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="produit_page",
                to="qfdmd.synonyme",
            ),
        ),
        migrations.AddConstraint(
            model_name="produitpage",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("produit__isnull", True),
                    ("synonyme__isnull", True),
                    _connector="OR",
                ),
                name="no_produit_and_synonyme_filled_in_parallel",
            ),
        ),
    ]
