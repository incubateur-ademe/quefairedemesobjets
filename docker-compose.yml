---
x-airflow-common: &airflow-common
  env_file:
    - ./dags/.env
  volumes:
    - ./core:/opt/airflow/core
    - ./qfdmo:/opt/airflow/qfdmo
    - ./qfdmd:/opt/airflow/qfdmd
    - ./data:/opt/airflow/data
    - ./dbt:/opt/airflow/dbt
    - ./logs:/opt/airflow/logs
    - ./dags:/opt/airflow/dags
    - ./scripts:/opt/airflow/scripts
    - ./config:/opt/airflow/config
    - ./plugins:/opt/airflow/plugins
  # Voir la doc et s'assurer que AIRFLOW_UID est
  # définit dans le .env pour correspondre à votre UID
  # sed -i '/^AIRFLOW_UID=/d' .env && echo "AIRFLOW_UID=$(id -u)" >> .env
  user: "${AIRFLOW_UID:-50000}:0"
  extra_hosts:
    - "host.docker.internal:host-gateway"
  depends_on: &airflow-common-depends-on
    airflow-db:
      condition: service_healthy

services:
  lvao-webapp-db:
    image: postgis/postgis:15-3.3-alpine
    environment:
      - POSTGRES_USER=webapp
      - POSTGRES_PASSWORD=webapp # pragma: allowlist secret
      - POSTGRES_DB=webapp
      - POSTGRES_MULTIPLE_EXTENSIONS=postgis
    volumes:
      - ./webapp_dbdata:/var/lib/postgresql/data:delegated
    expose:
      - 5432
    ports:
      - 6543:5432
    profiles: [lvao, airflow]
  lvao-warehouse-db:
    image: postgis/postgis:15-3.3-alpine
    environment:
      - POSTGRES_USER=warehouse
      - POSTGRES_PASSWORD=warehouse # pragma: allowlist secret
      - POSTGRES_DB=warehouse
      - POSTGRES_MULTIPLE_EXTENSIONS=postgis
    volumes:
      - ./warehouse_dbdata:/var/lib/postgresql/data:delegated
    expose:
      - 5432
    ports:
      - 8765:5432
    profiles: [airflow, prefect]
  lvao-proxy:
    image: nginx:latest
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx-local-only/servers.conf:/etc/nginx/servers.conf
      - ./nginx-local-only/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx-local-only/cache.conf:/etc/nginx/conf.d/cache.conf
      - ./nginx-local-only/certs:/etc/nginx/ssl
    profiles: [lvao]
  airflow-db:
    image: postgres:15
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow # pragma: allowlist secret
      POSTGRES_DB: airflow
    volumes:
      - ./airflow_dbdata:/var/lib/postgresql/data
    ports:
      - 7654:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    profiles: [airflow]

  airflow-webserver:
    <<: *airflow-common

    environment:
      _AIRFLOW_DB_MIGRATE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ""
    user: "0:0"
    build:
      context: .
      dockerfile: airflow-webserver.Dockerfile
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      <<: *airflow-common-depends-on
    profiles: [airflow]

  airflow-scheduler:
    <<: *airflow-common
    env_file:
      - ./dags/.env
    build:
      context: .
      dockerfile: airflow-scheduler.Dockerfile
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      <<: *airflow-common-depends-on
      airflow-webserver:
        condition: service_healthy
    profiles: [airflow]

  prefect-db:
    image: postgres:15
    environment:
      POSTGRES_USER: prefect
      POSTGRES_PASSWORD: prefect # pragma: allowlist secret
      POSTGRES_DB: prefect
    volumes:
      - ./prefect_dbdata:/var/lib/postgresql/data
    ports:
      - 9876:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "prefect"]
      interval: 10s
      retries: 5
      start_period: 5s
    profiles: [prefect]

  # docker run -p 4200:4200 -d --rm prefecthq/prefect:3-python3.12 prefect server start --host 0.0.0.0
  # Serveur Prefect (UI + API)
  prefect-server:
    image: prefecthq/prefect:3-python3.12
    ports:
      - "4200:4200"
    expose:
      - 4200
    env_file:
      - ./data_platform/.env
    command: prefect server start --host 0.0.0.0
    depends_on:
      prefect-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4200/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    profiles: [prefect]

  # Worker Prefect pour exécuter les flows
  prefect-worker:
    build:
      context: .
      dockerfile: prefect-worker.Dockerfile
    environment:
      PREFECT_API_URL: http://prefect-server:4200/api
    env_file:
      - ./data_platform/.env
    volumes:
      - ./data_platform:/opt/prefect/data_platform
      - ./core:/opt/prefect/core
      - ./qfdmo:/opt/prefect/qfdmo
      - ./qfdmd:/opt/prefect/qfdmd
      - ./data:/opt/prefect/data
      - ./logs:/opt/prefect/logs
    # command: prefect worker start --pool default
    # command: python /opt/prefect/data_platform/deploy.py
    command: python /opt/prefect/data_platform/deploy.py
    depends_on:
      prefect-server:
        condition: service_started
      lvao-warehouse-db:
        condition: service_started
    profiles: [prefect]