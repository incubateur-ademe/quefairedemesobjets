"""
üí° QUOI:
Mod√®les pydantic li√©s aux changements atomiques
apport√©s par les suggestions

üéØ POURQUOI:
 - pydantic nous permet de d√©coupler les suggestions
   de la DB
 - mais la m√©thode .apply() nous permet d'utiliser
    les mod√®les qfdmo pour appliquer les changements
    au moment voulu

üöß COMMENT APPLIQUER UN CHANGEMENT:
 - Faire passer la donner de suggestion dans le mod√®le
 - Appeler .apply()


üßä MODELISATION DES SUGGESTIONS:
On pourrait stocker les changements des suggestions
sous forme mod√©lis√©e:
 üü¢ avantage: pr√™t a l'emploi (plus qu'a r√©cup√©rer et faire apply
 au moment de l'approbation), mais au final gain marginal
 üî¥ incov√©nient: les suggestions en DB deviennent d√©pendentes
 des mod√®les, si les mod√®les changent on perd potentiellement
 les suggestions OU il faut en faire des migrations

Pour l'instant on voit que üî¥>>üü¢ et on d√©cide de:
 1) suggestion: on utilise le mod√®le UNIQUEMENT pour la validation,
    mais on stoque la donn√©e non mod√®lis√©e
 2) changement: on rejoue la donn√©e dans le mod√®le et on applique .apply()

Notes:
- D√©finir un mod√®le de changement dontles autres h√©ritent
- Stocker l'ordre des changements par type
- Centralisation la r√©solution du template de la cellule changement dans l'admin dans
chaque mod√®le pydantic
"""

from pydantic import BaseModel

from qfdmo.models import RevisionActeur

# -----------------------------
# COLONNES
# -----------------------------
# Colonnes utilis√©es pour d√©finir les changements
COL_CHANGE_TYPE = "change_type"  # = description + lien vers mod√®les
COL_CHANGE_ORDER = "change_order"  # = ordre d'application
COL_CHANGE_REASON = "change_reason"  # = debug

# -----------------------------
# 1) change_type
# -----------------------------
# Liste des changements possibles, l'avantage
# de d√©finir des noms est de restreindre et d'expliciter
# au maximum les cons√©quences des changements (on pourrait
# utiliser 1 seul mod√®le totallement abstrait mais en tra√ßabilit√©
# et √ßa deviendrait vite difficile √† maintenir)
CHANGE_ACTEUR_PARENT_DELETE = "acteur_parent_delete"
CHANGE_ACTEUR_PARENT_KEEP = "acteur_parent_keep"
CHANGE_ACTEUR_POINT_TO_PARENT = "acteur_point_to_parent"
CHANGE_ACTEUR_CREATE_AS_PARENT = "acteur_create_as_parent"


# -----------------------------
# 2) Mod√®les pydantic
# -----------------------------
# Pour g√©rer les changements, en utilisant
# l'h√©ritage selon les besoins


class ChangeActeur(BaseModel):
    """Mod√®le de base pour les changements d'un acteur'"""

    # On a besoin de savoir quel acteur changer
    identifiant_unique: str
    # Et quelle donn√©e changer (si c'est une update)
    data: dict = {}

    def data_validate(self):
        # Validation √† d√©finir au cas par cas
        raise NotImplementedError("M√©thode √† impl√©menter")

    def apply(self):
        # Modification √† d√©finir au cas par cas
        raise NotImplementedError("M√©thode √† impl√©menter")


class ChangeActeurUpdateData(ChangeActeur):
    """Mod√®le de mise √† jour d'un acteur"""

    def apply(self):
        self.data_validate()
        rev = RevisionActeur.objects.get(identifiant_unique=self.identifiant_unique)
        for key, value in self.data.items():
            setattr(rev, key, value)
        rev.save()


class ChangeActeurCreateRevision(ChangeActeur):
    """Cr√©ation de la r√©vision d'un acteur"""

    def data_validate(self):
        pass

    def apply(self):
        self.data_validate()
        rev = RevisionActeur(**self.data)
        rev.save()


class ChangeActeurDeleteRevision(ChangeActeur):
    """Suppresion d'un acteur suppos√© parent"""

    def data_validate(self):
        pass

    def apply(self):
        self.data_validate()
        # Rien √† faire, le parent doit √™tre supprim√© automatiquement
        # par les observers enfants
        pass


class ChangeActeurPointToParent(ChangeActeurUpdateData):
    """üîÄ Pour pointer un acteur vers un parent,
    on MAJ sa data, donc on part du mod√®le d'update
    et on ajoute juste une validtion sur data"""

    def data_validate(self):
        # Si on doit rediriger un acteur vers un parent
        # alors on s'attend √† ce que le parent existe
        parent = RevisionActeur.objects.filter(
            identifiant_unique=self.data["parent_id"]
        )
        if not parent.exists():
            raise ValueError(f"Parent {self.data['parent_id']} non trouv√©")


class ChangeActeurCreateAsParent(ChangeActeurCreateRevision):
    """‚ûï Pour la cr√©ation d'un parent, on cr√©er une r√©vision,
    donc on part du mod√®le de r√©vision et on ajoute juste
    une validation data"""

    def data_validate(self):
        # Si le parent est a cr√©er, alors on s'attend √† ce qu'il n'existe pas
        rev = RevisionActeur.objects.filter(identifiant_unique=self.identifiant_unique)
        if rev.exists():
            raise ValueError(f"Parent √† cr√©er {self.identifiant_unique} d√©j√† existant")


class ChangeActeurParentKeep(ChangeActeurUpdateData):
    """üü¢ Pour la MAJ d'un parent existant, on le met √† jour
    comme on MAJ un acteur mais avec la data qui nous int√©resse"""

    def data_validate(self):
        # On fait confiance √† la donn√©e qu'on re√ßoit,
        # on laisse les mod√®les Django se plaindre si pas content
        # MAIS on v√©rifie juste qu'on ne vient pas donner de source
        # √† un parent
        if "source" in self.data or "source_id" in self.data:
            raise ValueError("Pas de source pour un parent")


class ChangeActeurParentDelete(ChangeActeurDeleteRevision):
    """üî¥ Pour la suppression d'un parent, on supprime sa r√©vision,
    donc on part du mod√®le de revision et on ajoute juste
    une validation data"""

    def data_validate(self):
        # Si notre logique de suppression automatique
        # des parents sans enfants fonctionne, alors
        # quand on arrive ici, le parent doit avoir √©t√© supprim√©
        # par les observers
        rev = RevisionActeur.objects.filter(identifiant_unique=self.identifiant_unique)
        if rev.exists():
            raise ValueError(
                f"Parent {self.identifiant_unique} devrait d√©j√† √™tre supprim√©"
            )


# -----------------------------
# 3) Mapping change_type ‚û°Ô∏è mod√®le
# -----------------------------
MAPPING_TYPES_TO_MODELS = {
    # -----------------------------
    # Changements de type clustering/d√©duplication
    # -----------------------------
    CHANGE_ACTEUR_POINT_TO_PARENT: ChangeActeurPointToParent,
    CHANGE_ACTEUR_CREATE_AS_PARENT: ChangeActeurCreateAsParent,
    CHANGE_ACTEUR_PARENT_KEEP: ChangeActeurParentKeep,
    CHANGE_ACTEUR_PARENT_DELETE: ChangeActeurParentDelete,
}
