"""
üí° QUOI:
Mod√®les pydantic li√©s aux changements atomiques
apport√©s par les suggestions

üéØ POURQUOI:
 - pydantic nous permet de d√©coupler les suggestions
   de la DB
 - mais la m√©thode .apply() nous permet d'utiliser
    les mod√®les qfdmo pour appliquer les changements
    au moment voulu

üöß COMMENT APPLIQUER UN CHANGEMENT:
 - Faire passer la donner de suggestion dans le mod√®le
 - Appeler .apply()


üßä MODELISATION DES SUGGESTIONS:
On pourrait stocker les changements des suggestions
sous forme mod√©lis√©e:
 üü¢ avantage: pr√™t a l'emploi (plus qu'a r√©cup√©rer et faire apply
 au moment de l'approbation), mais au final gain marginal
 üî¥ incov√©nient: les suggestions deviennent d√©pendentes
 des mod√®les, si les mod√®les changent on perd potentiellement
 les suggestions OU il faut en faire des migrations

Pour l'instant on voit que üî¥>>üü¢ et on d√©cide de:
 1) suggestion: on utilise le mod√®le UNIQUEMENT pour la validation,
    mais on stoque la donn√©e non mod√®lis√©e
 2) changement: on rejoue la donn√©e dans le mod√®le et on applique .apply()

Notes:
- D√©finir un mod√®le de changement dontles autres h√©ritent
- Stocker l'ordre des changements par type
- Centralisation la r√©solution du template de la cellule changement dans l'admin dans
chaque mod√®le pydantic
 """

from pydantic import BaseModel

from qfdmo.models import RevisionActeur


class ChangeActeurUpdateParent(BaseModel):
    """Un acteur est rattach√© √† un parent,
    l'acteur peut avoir ou pas un parent existant"""

    id: str
    parent_id: str

    def apply(self):
        raise NotImplementedError("Revoir logique d'ensemble")
        # _ = RevisionActeur.objects.filter(id=self.id)
        # etc...


class ChangeActeurCreateAsParent(BaseModel):
    """Un parent est cr√©√© sur la base de
    donn√©es d'acteurs"""

    # L'identifiant unique peut √™tre fournit
    # (ex: UUID √† partir des ID des enfants)
    # et il sera utilis√©, sinon on g√©n√®re un
    id: str | None
    data: dict

    def apply(self) -> str:
        raise NotImplementedError("Revoir logique d'ensemble")
        # Si ID fournit, on v√©rifie qu'il n'existe pas
        rev = RevisionActeur.objects.filter(id=self.id)
        if rev.exists():
            raise ValueError(f"Acteur {self.id} d√©j√† existant")

        rev = RevisionActeur(**self.data)
        rev.save()

        return rev.id


class ChangeActeurEnrichParent(BaseModel):
    id: str
    data: dict


class ChangeActeurDeleteAsParent(BaseModel):
    """Suppresion d'un acteur suppos√© parent"""

    id: str

    def apply(self):
        raise NotImplementedError("Revoir logique d'ensemble")
        # TODO: peut √™tre d√©j√† supprim√© par https://github.com/incubateur-ademe/quefairedemesobjets/pull/1247
        # si oui condition inverse: il faut ordonner les changements de cluster
        # pour avoir les ChangeActeurUpdateParent en 1er et que l'observer
        # fasse le nettoyage avant qu'on arrive ici
        rev = RevisionActeur.objects.filter(id=self.id)
        if not rev.exists():
            raise ValueError(f"Acteur √† supprimer {self.id} non trouv√©")

        rev.delete()


TYPES_TO_MODELS = {
    "acteur_update_parent": ChangeActeurUpdateParent,
    "acteur_create_as_parent": ChangeActeurCreateAsParent,
    "acteur_delete_as_parent": ChangeActeurDeleteAsParent,
}
